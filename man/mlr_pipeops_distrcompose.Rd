% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpDistrCompositor.R
\name{mlr_pipeops_distrcompose}
\alias{mlr_pipeops_distrcompose}
\alias{PipeOpDistrCompositor}
\title{PipeOpDistrCompositor}
\format{\code{\link{R6Class}} inheriting from \code{\link{PipeOp}}.}
\description{
Predict a survival distribution from a survival learner \code{\link[mlr3:Prediction]{Prediction}}, which
predicts \code{lp} or \code{crank}.

Note:
\itemize{
\item This compositor is only sensible if assuming a linear model form, which may not always be the case.
\item Currently only discrete estimators, Kaplan-Meier and Nelson-Aalen, are implemented. Resulting in a
predicted \verb{[distr6::WeightedDiscrete]} distribution for each individual, in the future we plan to
extend this to allow continuous estimators.
}
}
\section{Construction}{
\preformatted{PipeOpDistrCompositor$new(id = "distrcompose", param_vals = list())
}
\itemize{
\item \code{id} :: \code{character(1)} \cr
Identifier of the resulting  object, default \code{"distrcompose"}.
\item \code{param_vals} :: named \code{list} \cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

\link{PipeOpDistrCompositor} has two input channels, "base" and "pred". Both input channels take
\code{NULL} during training and \link{PredictionSurv} during prediction.

\link{PipeOpDistrCompositor} has one output channel named "output", producing \code{NULL} during training
and a \link{PredictionSurv} during prediction.

The output during prediction is the \link{PredictionSurv} from the "pred" input but with an extra (or overwritten)
column for \code{distr} predict type; which is composed from the \code{distr} of "base" and \code{lp} or \code{crank}
of "pred".
}

\section{State}{

The \verb{$state} is left empty (\code{list()}).
}

\section{Parameters}{

The parameters are:
\itemize{
\item \code{form} :: \code{character(1)} \cr
Determines the form that the predicted linear survival model should take. This is either,
accelerated-failure time, \code{aft}, proportional hazards, \code{ph}, or proportional odds, \code{po}.
Default \code{aft}.
}
}

\section{Internals}{

The respective \code{form}s above have respective survival distributions:
\deqn{aft: S(t) = S0(t/exp(lp))}
\deqn{ph: S(t) = S0(t)^exp(lp)}
\deqn{po: S(t) = S0 * [exp(-lp) + (1-exp(-lp))*S0(t)]^-1}
where \eqn{S0} is the estimated baseline survival distribution, and \code{lp} is the predicted
linear predictor. If the input model does not predict a linear predictor then \code{crank} is
assumed to be the \code{lp} - \strong{this may be a strong and unreasonable assumption.}
}

\section{Fields}{

Only fields inherited from \link{PipeOp}.
}

\section{Methods}{

Only methods inherited from \link{PipeOp}.
}

\examples{
library("mlr3")
library("mlr3pipelines")

# Three methods to transform the cox ph predicted `distr` to an
#  accelerated failure time model
task = tsk("rats")

# Method 1 - Train and predict separately then compose
base = lrn("surv.kaplan")$train(task)$predict(task)
pred = lrn("surv.coxph")$train(task)$predict(task)
pod = po("distrcompose", param_vals = list(form = "aft"))
pod$predict(list(base = base, pred = pred))

# Method 2 - Create a graph manually
gr = Graph$new()$
  add_pipeop(po("learner", lrn("surv.kaplan")))$
  add_pipeop(po("learner", lrn("surv.coxph")))$
  add_pipeop(po("distrcompose"))$
  add_edge("surv.kaplan", "distrcompose", dst_channel = "base")$
  add_edge("surv.coxph", "distrcompose", dst_channel = "pred")
gr$train(task)
gr$predict(task)

# Method 3 - Syntactic sugar: Wrap the learner in a graph
cox.distr = distrcompositor(learner = lrn("surv.coxph"),
                            estimator = "kaplan",
                            form = "aft")
resample(task, cox.distr, rsmp("cv", folds = 2))
}
\seealso{
\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}
}
